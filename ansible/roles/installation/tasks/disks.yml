---

- name: Wipe install drive and all its partitions
  ansible.builtin.command: find /dev -wholename "{{ installation_drive.name }}*" -exec wipefs --force --all {} \;
  changed_when: true

- name: Increase cowspace to half of RAM # noqa command-instead-of-module
  ansible.builtin.command: mount -o remount,size=50% /run/archiso/cowspace
  changed_when: true

- name: Get archiso version # noqa command-instead-of-module
  ansible.builtin.command: sed 's-\.-/-g' /version
  register: installation_archiso_version
  changed_when: false

- name: Set archive as mirror
  ansible.builtin.template:
    src: mirrorlist.j2
    dest: /etc/pacman.d/mirrorlist
    owner: root
    group: root
    mode: "0644"

- name: Ensure aur.drik.it repo is added
  ansible.builtin.blockinfile:
    path: /etc/pacman.conf
    insertafter: EOF
    block: |
      [aur]
      SigLevel = Optional TrustAll
      Server = https://aur.drik.it

- name: Update cache packages
  community.general.pacman:
    update_cache: true

- name: Install zfs requirements on archiso
  community.general.pacman:
    name:
      - base-devel
      - linux-headers
      - git
    state: present
  changed_when: true
  when:
    - installation_install_zfs_on_archiso | default(true) | bool
    - not installation_install_zfs_custom_archiso | bool

- name: Install zfs on archiso
  community.general.pacman:
    name: "{{ installation_zfs_packages | split }}"
    state: present
  changed_when: true
  when:
    - installation_install_zfs_on_archiso | default(true) | bool
    - not installation_install_zfs_custom_archiso | bool

- name: Enable zfs on archiso
  ansible.builtin.command: modprobe zfs
  changed_when: true

- name: Ensure python-pexpect is installed
  community.general.pacman:
    name:
      - python-pexpect
    state: present

- name: Create MBR partition
  community.general.parted:
    device: "{{ installation_drive.name }}"
    label: gpt
    number: 1
    part_end: 1MiB
    name: mbr
    flags: [bios_grub]
    state: present
  when: installation_grub_enabled

- name: Create EFI partition
  community.general.parted:
    device: "{{ installation_drive.name }}"
    label: gpt
    number: "{{ 1 if not installation_grub_enabled else 2 }}"
    part_start: "{{ '0%' if not installation_grub_enabled else '1MiB' }}"
    part_end: "{{ '512MiB' if not installation_grub_enabled else '513MiB' }}"
    name: efi
    flags: [esp]
    state: present

- name: Create FAT32 filesystem in EFI partition
  community.general.filesystem:
    dev: "{{ installation_drive.name }}{{ installation_drive.efi_partition_suffix }}"
    fstype: vfat
    opts: -F32
    force: true

- name: Create root partition
  community.general.parted:
    device: "{{ installation_drive.name }}"
    label: gpt
    number: "{{ 2 if not installation_grub_enabled else 3 }}"
    part_start: "{{ '512MiB' if not installation_grub_enabled else '513MiB' }}"
    name: root
    state: present

- name: Create encrypted zpool
  ansible.builtin.expect:
    command: >
      zpool create -f -o ashift=12
      -O acltype=posixacl
      -O relatime=on
      -o autotrim=on
      -o autoexpand=on
      -O xattr=sa
      -O dnodesize=legacy
      -O normalization=formD
      -O mountpoint=none
      -O canmount=off
      -O devices=off
      -R /mnt
      -O compression={{ installation_zfs_zpool_compression }}
      -O encryption=aes-256-gcm
      -O keyformat=passphrase
      -O keylocation=prompt
      {{ installation_zfs_additional_zpool_properties | default('') | trim }}
      {{ installation_drive.root_zpool }} {{ installation_drive.name }}{{ installation_drive.root_partition_suffix }}
    responses:
      (?i)passphrase: "{{ crypt_passphrase }}"
  no_log: false
  changed_when: true

- name: Create datasets
  ansible.builtin.command: zfs create {{ item.properties }} {{ installation_drive.root_zpool }}/{{ item.name }}
  changed_when: true
  loop: "{{ installation_zfs_datasets }}"

- name: Export root zpool
  ansible.builtin.command: zpool export {{ installation_drive.root_zpool }}
  changed_when: true

- name: Get root zpool id # noqa risky-shell-pipe
  ansible.builtin.shell: zpool import | grep -oP '(?<=id:).*'
  changed_when: false
  register: installation_zfs_root_zpool_import_id_result

- name: Import root zpool
  ansible.builtin.command: zpool import {{ installation_zfs_root_zpool_import_id_result.stdout | trim }} -R /mnt {{ installation_drive.root_zpool }}
  changed_when: true

- name: Open root zpool
  ansible.builtin.expect:
    command: zfs load-key {{ installation_drive.root_zpool }}
    responses:
      (?i)passphrase: "{{ crypt_passphrase }}"

- name: Mount datasets and configure properties and cache
  ansible.builtin.command: "{{ item }}"
  changed_when: true
  loop:
    - "zfs mount {{ installation_zfs_root_dataset }}"
    - "zfs mount -a"
    - "zpool set bootfs={{ installation_zfs_root_dataset }} {{ installation_drive.root_zpool }}"
    - "zpool set cachefile=/etc/zfs/zpool.cache {{ installation_drive.root_zpool }}"
    - "mkdir -p /mnt/etc/zfs"
    - "mkdir -p /mnt/etc/exports.d"
    - "cp /etc/zfs/zpool.cache /mnt/etc/zfs/zpool.cache"

- name: Create mountpoints for efi
  ansible.builtin.file:
    path: /mnt{{ installation_efi_partiton_mount_point }}
    state: directory
    mode: "0700"

- name: Mount EFI filesystem
  ansible.posix.mount:
    path: /mnt{{ installation_efi_partiton_mount_point }}
    src: "{{ installation_drive.name }}{{ installation_drive.efi_partition_suffix }}"
    fstype: vfat
    passno: 2
    state: mounted

- name: Bind mount boot when uki disabled
  ansible.posix.mount:
    path: /mnt/boot
    src: /mnt/{{ installation_efi_partiton_mount_point }}
    fstype: zfs
    opts: bind,defaults
    state: mounted
  when: not installation_uki_enabled
